input {
  redis {
    host => "{{ broker_host }}"
    type => "redis-input"

    # these settings should match the output of the agent
    data_type => "list"
    key => "logstash"

    # We use json_event here since the sender is a logstash agent
    format => "json_event"
  }
}

# syslog handling
filter {
  ### START http://cookbook.logstash.net/recipes/central-syslog/
  # NOTE: instead of using types, we're using tags.
  # The tags were added by the shipper at input time.
  #
  # Check if syslog message has PRI using grep.   If so then :
  # strip the syslog PRI part and create facility and severity fields.
  # the original syslog message is saved in field %{syslog_raw_message}.
  # the extracted PRI is available in the %{syslog_pri} field.
  #
  # You get %{syslog_facility_code} and %{syslog_severity_code} fields.
  # You also get %{syslog_facility} and %{syslog_severity} fields if the
  # use_labels option is set True (the default) on syslog_pri filter.
  grep {
    tags => "syslog"
    match => ["@message","<\d+>"]
    add_tag => "has_pri"
    drop => false
  }
  grok {
    tags => [ "syslog", "has_pri" ]
    pattern => [ "<%{POSINT:syslog_pri}>%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_pri"
    add_field => [ "syslog_raw_message", "%{@message}" ]
  }
  syslog_pri {
    tags => [ "syslog", "got_syslog_pri" ]
  }
  mutate {
    tags => [ "syslog", "got_syslog_pri" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # XXX must not be combined with replacement which uses same field
    tags => [ "syslog", "got_syslog_pri" ]
    remove => [ "message_remainder" ]
  }
  # strip the syslog timestamp and force event timestamp to be the same.
  # the original string is saved in field %{syslog_timestamp}.
  # the original logstash input timestamp is saved in field %{received_at}.
  grok {
    tags => [ "syslog" ]
    pattern => [ "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_timestamp"
    add_field => [ "received_at", "%{@timestamp}" ]
  }
  mutate {
    tags => [ "syslog", "got_syslog_timestamp" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # XXX must not be combined with replacement which uses same field
    tags => [ "syslog", "got_syslog_timestamp" ]
    remove => [ "message_remainder" ]
  }
  date {
    tags => [ "syslog", "got_syslog_timestamp" ]
    # season to taste for your own syslog format(s)
    match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
  }
  # strip the host field from the syslog line.
  # the extracted host field becomes the logstash %{@source_host} metadata
  # and is also available in the filed %{syslog_hostname}.
  # the original logstash source_host is saved in field %{logstash_source}.
  grok {
    tags => [ "syslog" ]
    pattern => [ "%{SYSLOGHOST:syslog_hostname}%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_host"
    add_field => [ "logstash_source", "%{@source_host}" ]
  }
  mutate {
    tags => [ "syslog", "got_syslog_host" ]
    replace => [ "@source_host", "%{syslog_hostname}" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # message_remainder no longer needed.
    tags => [ "syslog", "got_syslog_host" ]
    remove => [ "message_remainder" ]
  }

  # strip the program and optional pid field from the syslog line.
  # available in the field %{syslog_program} and %{syslog_pid}.
  grok {
    tags => [ "syslog" ]
    pattern => [ "%{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_program"
  }
  mutate {
    tags => [ "syslog", "got_syslog_program" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # message_remainder no longer needed.
    tags => [ "syslog", "got_syslog_program" ]
    remove => [ "message_remainder" ]
  }
  ### END http://cookbook.logstash.net/recipes/central-syslog/

  # ovpn-client noise reduction
  grep {
    tags => [ "syslog" ]
    match => [ "syslog_program", "ovpn-client" ]
    add_tag => [ "ovpn-client" ]
    drop => false
  }
  multiline {
    tags => [ "syslog" ]
    tags => "ovpn-client"
    pattern => "^(EMER|ALERT|CRIT|ERR|WARN|NOTICE|INFO|DEBUG)"
    negate => true
    what => "previous"
  }
}

# log4j handling
filter {
  # log4j noise reduction
  # http://blog.monitis.com/index.php/2012/08/07/monitor-your-java-application-logs-in-4-easy-steps/
  # covers this a little bit.
  multiline {
    tags => [ "log4j" ]
    pattern => "^\\s"
    what => "previous"
  }
  mutate {
    tags => [ "log4j" ]
    add_field => [ "log4j_ip", "%{@source_host}" ]
  }
  mutate {
    tags => [ "log4j" ]
    gsub => [ "log4j_ip", ":.*$", "" ]
  }

}

output {
  # stdout { debug => true debug_format => "json"}
  {% for host in elasticsearch_hosts -%}
  elasticsearch {
    host => "{{ host }}"
  }
  {%- endfor %}
}
